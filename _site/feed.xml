<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Seulki's Dev Blog</title>
    <description>Seulki's Dev Blog</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 22 Jul 2021 17:16:21 +0900</pubDate>
    <lastBuildDate>Thu, 22 Jul 2021 17:16:21 +0900</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>Flutter의 State 정리.</title>
        <description>&lt;h6 id=&quot;공식-홈페이지를-참고하여-flutter-state의-개념에-대해-알아보고-나름대로-정리를-해-놓은-글로-오역-및-잘못된-정보가-있을-수-있습니다-&quot;&gt;공식 홈페이지를 참고하여 flutter state의 개념에 대해 알아보고 나름대로 정리를 해 놓은 글로 오역 및 잘못된 정보가 있을 수 있습니다 !!&lt;/h6&gt;
&lt;p&gt;보다 더 정확한 내용은 아래의 링크를 참고하시는게 좋습니다-! (영문)
&lt;a href=&quot;https://flutter-ko.dev/docs/development/data-and-backend/state-mgmt/intro&quot;&gt;Flutter 공식 홈페이지에 나온 설명&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;ephemeral-state--단일-위젯-상태-&quot;&gt;Ephemeral state ( 단일 위젯 상태 )&lt;/h4&gt;
&lt;p&gt;UI state, Local state등 으로도 불리는 사용후 삭제되는 상태.&lt;/p&gt;

&lt;p&gt;공홈에 나온 예시들 )&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;PageView 안의 현재 페이지.&lt;/li&gt;
  &lt;li&gt;복잡한 애니메이션의 현재 진행 상황.&lt;/li&gt;
  &lt;li&gt;BottomNavigationBar 안의 현재 선택된 탭.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;단순한 방법으로 변경되며, 위젯 트리의 다른 부분에서 해당 상태에 엑세스 할 필요가 없는 상태에 사용.
상태 관리(Redux, getX 등)를 사용할 필요없이, Stateful Widget만을 사용해도 충분할 때.
++나의 생각) api, data 등 서버 통신이 필요 없을 때. 한 페이지(route) 안에서 끝나는 작업들에 적합한 것으로 예상된다.&lt;/p&gt;

&lt;h4 id=&quot;app-state--공유-상태-&quot;&gt;App State ( 공유 상태 )&lt;/h4&gt;
&lt;p&gt;사용 후 삭제 되지않고, App 내의 여러 곳에서 공유되며, 사용자 세션 유지등에 필요한 상태.&lt;/p&gt;

&lt;p&gt;공홈에 나온 예시들)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;사용자 기본 설정&lt;/li&gt;
  &lt;li&gt;로그인 정보&lt;/li&gt;
  &lt;li&gt;SNS앱에서 알림&lt;/li&gt;
  &lt;li&gt;E-커머스 앱에서 장바구니&lt;/li&gt;
  &lt;li&gt;신문앱의 기사나, 게시글의 읽음/읽지 않음 상태.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;여러 곳에서 전역적으로 사용되는 상태. 앱에 로그인한 사용자의 정보 또는 로그인 정보등이 대표적이다.
++나의 생각) 단순히 화면UI가 바뀌는 상태가 아니라, api, data등 서버 통신이 필요할 때 쓰일 것으로 예상된다.
나는 App State를 서비스의 DB 테이블을 참고하여 구조를 짤 계획이다. App State Management Tool 로 getX를 사용할 것이다. 
&lt;a href=&quot;https://github.com/jonataslaw/getx/blob/master/README.ko-kr.md&quot;&gt;getX 한국어 버전 설명&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

</description>
        <pubDate>Fri, 25 Jun 2021 00:00:00 +0900</pubDate>
        <link>/third-note/</link>
        <guid isPermaLink="true">/third-note/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>Flutter+FireBase Google Login 기능 붙이기.</title>
        <description>&lt;h4 id=&quot;flutter-firebase-소셜-로그인을-위한-기본-셋팅&quot;&gt;Flutter Firebase 소셜 로그인을 위한 기본 셋팅.&lt;/h4&gt;
&lt;p&gt;플러터에서 firesbase를 이용하여 소셜 로그인을 하려면, firebase 내에서 몇 가지 준비와,
flutter에서 기본 세팅들이 필요하다. 이 글은 기본 셋팅이 모두 완료 됐다는 가정하에 작성 한다-!
(사실 나도 블로그들을 이것 저것 보며 어떻게 한거라서.. 세세하게 기억나지 않는다..ㅠㅠ)&lt;/p&gt;

&lt;h4 id=&quot;프로젝드-개발-환경&quot;&gt;프로젝드 개발 환경&lt;/h4&gt;
&lt;p&gt;우선 우리 회사의 프로젝트는
GCP 이용중 ( Node.js, Express ),
Firebase 이용중 (Core, Authentication, Storage)
그리고 DB는 Mysql을 이용중 -!&lt;/p&gt;

&lt;p&gt;구글 로그인은 firebase에서 지원하는 소셜 로그인이기 때문에 순조롭게(?) 구현할 수 있었다.&lt;/p&gt;

&lt;h4 id=&quot;flutterfire-google_sign_in&quot;&gt;FlutterFire (google_sign_in)&lt;/h4&gt;

&lt;p&gt;나는 FlutterFire 문서를 보고 google_sign_in 을 사용하여 구글 로그인을 구현했다.
&lt;a href=&quot;https://firebase.flutter.dev/docs/auth/social/&quot;&gt;FlutterFire의 소셜 Auth 링크&lt;/a&gt;
플러터를 이용해서 구글 로그인을 보다 쉽게 도와주는 툴 인것 같다.&lt;/p&gt;

&lt;hr /&gt;

</description>
        <pubDate>Fri, 25 Jun 2021 00:00:00 +0900</pubDate>
        <link>/third-note-copy/</link>
        <guid isPermaLink="true">/third-note-copy/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>Flutter로 Wikitude AR SDK 테스트 하기 -!</title>
        <description>&lt;h4 id=&quot;flutter를-배워보자&quot;&gt;Flutter를 배워보자.&lt;/h4&gt;
&lt;p&gt;회사에서 flutter로 새로운 앱 서비스를 준비하고 있다. 
나는 재작년부터 ‘EggMorning’ 앱 스터디를 하면서 React Native로 앱 개발을 처음 도전 해봤는데, 
그 때는 RN업데이트 마다 라이브러리의 버전 충돌 이슈들을 잡느라 곤욕을 치르며 결국 스터디에서는 flutter로 갈아타기로 결정된 상태였다.&lt;/p&gt;

&lt;p&gt;회사에서 AR기능의 앱을 서비스 하고 있는데, wikitude의 SDK를 사용하고 있었다. 
그래서 wikitude에서 모바일 플랫폼 용으로 SDK를 지원하는 Flutter를 사용하게 되었다. (RN은 Third-party Plugins지원.) 
RN에서도 wikitude를 테스트 해봤지만, 나는 실패했다.ㅋㅋㅋㅋ Flutter에서는 wikitude의 샘플 AR이 정상 작동했다. 야호!&lt;/p&gt;

&lt;p&gt;이렇게 feasible test를 통해 새로운 서비스는 Flutter 로 결정!
열공해야즵-!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.wikitude.com/download/&quot;&gt;wikitude SDK Download Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://seulkileee.github.io/assets/video/wiki-sample.gif&quot; alt=&quot;wikitude-Flutter AR 테스트 영상&quot; /&gt;&lt;/p&gt;
&lt;h6 id=&quot;정상-작동중인-wikitude-flutter-sample-app-꺅-신난당ㅎ_ㅎ아이패드로-테스트&quot;&gt;정상 작동중인 Wikitude-Flutter Sample App 꺅!! 신난당ㅎ_ㅎ(아이패드로 테스트)&lt;/h6&gt;
&lt;hr /&gt;

</description>
        <pubDate>Tue, 22 Jun 2021 00:00:00 +0900</pubDate>
        <link>/second-note/</link>
        <guid isPermaLink="true">/second-note/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>2021년 5월 22일 토요일, 개발 블로그를 다시 시작하다.</title>
        <description>&lt;p&gt;&amp;lt; 노마드 코더의 풀스택 인스타그램 클론 코딩 &amp;gt;
인스타그램 백엔드 + 프론트엔드 + 앱 + 서버
를 배우는 과정.&lt;/p&gt;

&lt;p&gt;노마드코더 홈페이지에 나와있는 강의 정보를 가져왔다.
https://nomadcoders.co/instaclone&lt;/p&gt;

&lt;p&gt;프로젝트가 끝나고 한숨 돌릴 여유가 생겼으니 이제 열공 해야지-!&lt;/p&gt;

&lt;h4 id=&quot;강의-정보&quot;&gt;강의 정보&lt;/h4&gt;

&lt;p&gt;총 강의수: 232개. 2,119분 (36시간 19분)&lt;/p&gt;

&lt;p&gt;Django 인스타그램 1.0 (2017)
Prisma 인스타그램 2.0 (2019)
인스타그램 클론코딩 버전 3.0 (2021)&lt;/p&gt;

&lt;h4 id=&quot;강의-목표&quot;&gt;강의 목표&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;백엔드 + 프론트엔드 + 앱 (ios &amp;amp; 안드로이드) = 걍 몽땅 다 해먹는 강의임
Expo 로 앱을 만들고. 추가로 React Native CLI 로 설명도 해드릴 예정!
-노마드코더-
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;spec&quot;&gt;SPEC&lt;/h4&gt;

&lt;p&gt;프론트엔드: Apollo, React, React Hook Form, Styled Components, React Hooks
백엔드: Apollo Server, GraphQL, Prisma Studio, Prisma Migrate, Prisma Client
앱: iOS &amp;amp; Android: React Native, Expo, React Native CLI, React Navigation, React Native Web&lt;/p&gt;
</description>
        <pubDate>Fri, 21 May 2021 00:00:00 +0900</pubDate>
        <link>/first-note/</link>
        <guid isPermaLink="true">/first-note/</guid>
        
        
        <category>React</category>
        
      </item>
    
  </channel>
</rss>
